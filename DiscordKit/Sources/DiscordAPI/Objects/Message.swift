//
//  Message.swift
//  DiscordAPI
//
//  Created by Vincent Kwok on 19/2/22.
//

import Foundation

public enum MessageType: Int, Codable {
    case defaultMsg = 0
    case recipientAdd = 1
    case recipientRemove = 2
    case call = 3
    case chNameChange = 4
    case chIconChange = 5
    case chPinnedMsg = 6
    case guildMemberJoin = 7
    case userPremiumGuildSub = 8
    case userPremiumGuildSubTier1 = 9
    case userPremiumGuildSubTier2 = 10
    case userPremiumGuildSubTier3 = 11
    case chFollowAdd = 12
    case guildDiscoveryDisqualified = 14
    case guildDiscoveryRequalified = 15
    case guildDiscoveryGraceInitial = 16
    case guildDiscoveryGraceFinal = 17
    case threadCreated = 18
    case reply = 19
    case chatInputCmd = 20
    case threadStarterMsg = 21
    case guildInviteReminder = 22
    case contextMenuCmd = 23
}

public struct Message: GatewayData, Identifiable {
	public let id: Snowflake
	public let channel_id: Snowflake
	public let guild_id: Snowflake?
	public var author: User
	public var member: Member?
	public var content: String // The message contents (up to 2000 characters)
	public let timestamp: ISOTimestamp
	public var edited_timestamp: ISOTimestamp?
	public var tts: Bool
	public var mention_everyone: Bool
	public var mentions: [User]
	public var mention_roles: [Snowflake] // Role IDs that were mentioned
	public var mention_channels: [ChannelMention]?
	public var attachments: [Attachment]
	public var embeds: [Embed]
	public var reactions: [Reaction]?
	// Nonce can either be string or int and isn't important so I'm not including it for now
	public var pinned: Bool
	public var webhook_id: Snowflake? // If the message is generated by a webhook, this is the webhook's id
	public let type: MessageType
	public var activity: MessageActivity?
	public var application: Application?
	public var application_id: Snowflake?
	public var message_reference: MessageReference?
	public var flags: Int?
	// Recursive properties don't work, so referenced_message can't be here for now
	public var interaction: MessageInteraction?
	public var thread: Channel?
	public var components: [MessageComponent]?
	public var sticker_items: [StickerItem]?
}

// A complete copy of Message but with most properties as Optional
// Swift doesn't have a Optional or Partial wrapper yet :(((
public struct PartialMessage: GatewayData, Identifiable {
	public let id: Snowflake
	public let channel_id: Snowflake
	public let guild_id: Snowflake?
	public let author: User?
	public let member: Member?
	public let content: String? // The message contents (up to 2000 characters)
	public let timestamp: ISOTimestamp?
	public let edited_timestamp: ISOTimestamp?
	public let tts: Bool?
	public let mention_everyone: Bool?
	public let mentions: [User]?
	public let mention_roles: [Snowflake]?
	public let mention_channels: [ChannelMention]?
	public let attachments: [Attachment]?
	public let embeds: [Embed]?
	public let reactions: [Reaction]?
    // Nonce can either be string or int and isn't important so I'm not including it for now
	public let pinned: Bool?
	public let webhook_id: Snowflake? // If the message is generated by a webhook, this is the webhook's id
	public let type: MessageType?
	public let activity: MessageActivity?
	public let application: Application?
	public let application_id: Snowflake?
	public let message_reference: MessageReference?
	public let flags: Int?
    // Recursive properties don't work, so referenced_message can't be here for now
	public let interaction: MessageInteraction?
	public let thread: Channel?
	public let components: [MessageComponent]?
	public let sticker_items: [StickerItem]?
}

// MARK: Mostly implemented message struct, missing file params
public struct OutgoingMessage: Codable {
	public let content: String // The message contents (up to 2000 characters)
	public let tts: Bool?
	public let embeds: [Embed]?
	public let embed: Embed? // Embedded rich content, depreciated in favor of embeds
	public let allowed_mentions: AllowedMentions?
	public let message_reference: MessageReference?
	public let components: [MessageComponent]?
	public let sticker_ids: [Snowflake]?
	public let flags: Int?
}

public enum MessageActivityType: Int, Codable {
    case join = 1
    case spectate = 2
    case listen = 3
    case joinRequest = 5
}

public struct MessageActivity: Codable {
	public let type: MessageActivityType
	public let party_id: String? // party_id from a Rich Presence event
}

// MARK: Reference an existing message as a reply
public struct MessageReference: Codable {
	public let message_id: Snowflake? // id of the originating message
	public let channel_id: Snowflake? // id of the originating message's channel
	public let guild_id: Snowflake? // id of the originating message's guild
	public let fail_if_not_exists: Bool? // When sending, whether to error if the referenced message doesn't exist instead of sending as a normal (non-reply) message (default true)
}

public enum MessageComponentTypes: Int, Codable {
    case actionRow = 1
    case button = 2
    case selectMenu = 3
    case textInput = 4
}

// MARK: New message component struct, incomplete
public struct MessageComponent: Codable {
	public let type: MessageComponentTypes
}
